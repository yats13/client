services:
  client:
    image: "node:${NODE_VERSION}-alpine"
    container_name: client
    restart: unless-stopped
    working_dir: /home/node/app/client
    volumes:
      - .:/home/node/app/client
    environment:
      - DATABASE_URL=${DATABASE_URL}
    command: "yarn run dev"
    expose:
      - "${INTERNAL_PORT}"    
    ports:
      - '${INTERNAL_PORT}:${INTERNAL_PORT}'
    depends_on:
      - postgres
      - mongo
      - redis

  postgres:
    image: postgres:${POSTGRES_VERSION}-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - .env.local
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongo:
    image: mongo:${MONGO_VERSION}
    container_name: mongo
    restart: unless-stopped
    ports:
      - '${MONGO_PORT}:${MONGO_PORT}'
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: super_secret_password
      ME_CONFIG_MONGODB_URL: ${MONGO_URL}
      ME_CONFIG_BASICAUTH: false

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'

volumes:
  postgres_data:
  mongo_data: